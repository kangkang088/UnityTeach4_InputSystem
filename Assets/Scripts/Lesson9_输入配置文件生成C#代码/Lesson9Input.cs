//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Lesson9_输入配置文件生成C#代码/Lesson9Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Lesson9Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Lesson9Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Lesson9Input"",
    ""maps"": [
        {
            ""name"": ""Action1"",
            ""id"": ""e1df1855-6fee-47eb-87ff-3087ee834719"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""48eee0c9-25cd-4941-b601-d994d05a725a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dab5b05f-ef01-4d62-81ad-955e14648f1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8eb741b8-6cd1-44f1-99c8-7a956b17f020"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""829da6e8-55a7-4d7c-b2d2-92c3bdda18d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84851de5-f01f-47ac-a2a8-f648a0d1d371"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c05d0fb0-2ec9-4b92-9386-d4d8a6e38f23"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""19ccaad2-8e53-4448-80b0-673984f57153"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""350be475-5315-441d-9577-8d8afb9cf3ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Action2"",
            ""id"": ""6201d44e-e37d-4788-b9e3-3555b7d22704"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""c24f273a-6ae2-46c2-8013-487574408170"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""791ea012-e70f-4e5a-aa1d-134696db63a6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action1
        m_Action1 = asset.FindActionMap("Action1", throwIfNotFound: true);
        m_Action1_Fire = m_Action1.FindAction("Fire", throwIfNotFound: true);
        m_Action1_Move = m_Action1.FindAction("Move", throwIfNotFound: true);
        // Action2
        m_Action2 = asset.FindActionMap("Action2", throwIfNotFound: true);
        m_Action2_Space = m_Action2.FindAction("Space", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action1
    private readonly InputActionMap m_Action1;
    private IAction1Actions m_Action1ActionsCallbackInterface;
    private readonly InputAction m_Action1_Fire;
    private readonly InputAction m_Action1_Move;
    public struct Action1Actions
    {
        private @Lesson9Input m_Wrapper;
        public Action1Actions(@Lesson9Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Action1_Fire;
        public InputAction @Move => m_Wrapper.m_Action1_Move;
        public InputActionMap Get() { return m_Wrapper.m_Action1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action1Actions set) { return set.Get(); }
        public void SetCallbacks(IAction1Actions instance)
        {
            if (m_Wrapper.m_Action1ActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Move.started -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Action1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Action1Actions @Action1 => new Action1Actions(this);

    // Action2
    private readonly InputActionMap m_Action2;
    private IAction2Actions m_Action2ActionsCallbackInterface;
    private readonly InputAction m_Action2_Space;
    public struct Action2Actions
    {
        private @Lesson9Input m_Wrapper;
        public Action2Actions(@Lesson9Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Action2_Space;
        public InputActionMap Get() { return m_Wrapper.m_Action2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action2Actions set) { return set.Get(); }
        public void SetCallbacks(IAction2Actions instance)
        {
            if (m_Wrapper.m_Action2ActionsCallbackInterface != null)
            {
                @Space.started -= m_Wrapper.m_Action2ActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_Action2ActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_Action2ActionsCallbackInterface.OnSpace;
            }
            m_Wrapper.m_Action2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
            }
        }
    }
    public Action2Actions @Action2 => new Action2Actions(this);
    public interface IAction1Actions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IAction2Actions
    {
        void OnSpace(InputAction.CallbackContext context);
    }
}
